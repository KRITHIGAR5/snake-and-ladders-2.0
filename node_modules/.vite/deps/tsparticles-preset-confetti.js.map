{
  "version": 3,
  "sources": ["../../tsparticles-updater-angle/esm/Options/Classes/RotateAnimation.js", "../../tsparticles-updater-angle/esm/Options/Classes/Rotate.js", "../../tsparticles-updater-angle/esm/RotateUpdater.js", "../../tsparticles-updater-angle/esm/index.js", "../../tsparticles-move-base/esm/Utils.js", "../../tsparticles-move-base/esm/BaseMover.js", "../../tsparticles-move-base/esm/index.js", "../../tsparticles-shape-circle/esm/CircleDrawer.js", "../../tsparticles-shape-circle/esm/index.js", "../../tsparticles-updater-color/esm/ColorUpdater.js", "../../tsparticles-updater-color/esm/index.js", "../../tsparticles-plugin-emitters/esm/Shapes/Circle/CircleShape.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/EmitterLife.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/EmitterRate.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/EmitterSize.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/Emitter.js", "../../tsparticles-plugin-emitters/esm/EmitterInstance.js", "../../tsparticles-plugin-emitters/esm/Emitters.js", "../../tsparticles-plugin-emitters/esm/ShapeManager.js", "../../tsparticles-plugin-emitters/esm/Shapes/Square/SquareShape.js", "../../tsparticles-plugin-emitters/esm/index.js", "../../tsparticles-updater-life/esm/Options/Classes/LifeDelay.js", "../../tsparticles-updater-life/esm/Options/Classes/LifeDuration.js", "../../tsparticles-updater-life/esm/Options/Classes/Life.js", "../../tsparticles-updater-life/esm/LifeUpdater.js", "../../tsparticles-updater-life/esm/index.js", "../../tsparticles-plugin-motion/esm/Options/Classes/MotionReduce.js", "../../tsparticles-plugin-motion/esm/Options/Classes/Motion.js", "../../tsparticles-plugin-motion/esm/MotionInstance.js", "../../tsparticles-plugin-motion/esm/index.js", "../../tsparticles-updater-opacity/esm/OpacityUpdater.js", "../../tsparticles-updater-opacity/esm/index.js", "../../tsparticles-preset-confetti/esm/ConfettiOptions.js", "../../tsparticles-preset-confetti/esm/options.js", "../../tsparticles-updater-out-modes/esm/Utils.js", "../../tsparticles-updater-out-modes/esm/BounceOutMode.js", "../../tsparticles-updater-out-modes/esm/DestroyOutMode.js", "../../tsparticles-updater-out-modes/esm/NoneOutMode.js", "../../tsparticles-updater-out-modes/esm/OutOutMode.js", "../../tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js", "../../tsparticles-updater-out-modes/esm/index.js", "../../tsparticles-updater-roll/esm/Options/Classes/RollLight.js", "../../tsparticles-updater-roll/esm/Options/Classes/Roll.js", "../../tsparticles-updater-roll/esm/RollUpdater.js", "../../tsparticles-updater-roll/esm/index.js", "../../tsparticles-updater-size/esm/SizeUpdater.js", "../../tsparticles-updater-size/esm/index.js", "../../tsparticles-shape-square/esm/SquareDrawer.js", "../../tsparticles-shape-square/esm/index.js", "../../tsparticles-updater-tilt/esm/Options/Classes/TiltAnimation.js", "../../tsparticles-updater-tilt/esm/Options/Classes/Tilt.js", "../../tsparticles-updater-tilt/esm/TiltUpdater.js", "../../tsparticles-updater-tilt/esm/index.js", "../../tsparticles-updater-wobble/esm/Options/Classes/WobbleSpeed.js", "../../tsparticles-updater-wobble/esm/Options/Classes/Wobble.js", "../../tsparticles-updater-wobble/esm/WobbleUpdater.js", "../../tsparticles-updater-wobble/esm/index.js", "../../tsparticles-preset-confetti/esm/index.js"],
  "sourcesContent": ["import { setRangeValue } from \"tsparticles-engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nimport { RotateAnimation } from \"./RotateAnimation\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = \"clockwise\";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n", "import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateAngle(particle, delta) {\n    var _a, _b;\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n        }\n    }\n    update(particle, delta) {\n        var _a, _b;\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n        particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n}\n", "import { RotateUpdater } from \"./RotateUpdater\";\nexport async function loadAngleUpdater(engine) {\n    await engine.addParticleUpdater(\"rotate\", (container) => new RotateUpdater(container));\n}\n", "import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), hDistance = particle.retina.maxDistance.horizontal, vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    var _a;\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = (_a = particle.pathGenerator) === null || _a === void 0 ? void 0 : _a.generate(particle);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n", "import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, gravityOptions = options.move.gravity, spinOptions = options.move.spin;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            applyPath(particle, delta);\n            const gravityOptions = particle.gravity, gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n                particle.velocity.y +=\n                    (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n            }\n            if (moveDrift && moveSpeed) {\n                particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n            }\n            const decay = particle.moveDecay;\n            if (decay != 1) {\n                particle.velocity.multTo(decay);\n            }\n            const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) &&\n                maxSpeed > 0 &&\n                ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                    (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n                velocity.y = gravityFactor * maxSpeed;\n                if (moveSpeed) {\n                    particle.velocity.y = velocity.y / moveSpeed;\n                }\n            }\n            const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n", "import { BaseMover } from \"./BaseMover\";\nexport async function loadBaseMover(engine) {\n    engine.addMover(\"base\", () => new BaseMover());\n}\n", "export class CircleDrawer {\n    draw(context, particle, radius) {\n        if (!particle.circleRange) {\n            particle.circleRange = { min: 0, max: Math.PI * 2 };\n        }\n        const circleRange = particle.circleRange;\n        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\n    }\n    getSidesCount() {\n        return 12;\n    }\n    particleInit(container, particle) {\n        var _a;\n        const shapeData = particle.shapeData, angle = (_a = shapeData === null || shapeData === void 0 ? void 0 : shapeData.angle) !== null && _a !== void 0 ? _a : {\n            max: 360,\n            min: 0,\n        };\n        particle.circleRange =\n            typeof angle !== \"object\"\n                ? {\n                    min: 0,\n                    max: (angle * Math.PI) / 180,\n                }\n                : { min: (angle.min * Math.PI) / 180, max: (angle.max * Math.PI) / 180 };\n    }\n}\n", "import { CircleDrawer } from \"./CircleDrawer\";\nexport async function loadCircleShape(engine) {\n    await engine.addShape(\"circle\", new CircleDrawer());\n}\n", "import { getHslAnimationFromHsl, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\nfunction updateColorValue(delta, value, valueAnimation, max, decrease) {\n    var _a, _b;\n    const colorValue = value;\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        (colorValue.loops !== undefined &&\n            colorValue.maxLoops !== undefined &&\n            colorValue.maxLoops > 0 &&\n            colorValue.loops >= colorValue.maxLoops)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6, decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nfunction updateColor(particle, delta) {\n    var _a, _b, _c;\n    const animationOptions = particle.options.color.animation;\n    const h = (_a = particle.color) === null || _a === void 0 ? void 0 : _a.h, s = (_b = particle.color) === null || _b === void 0 ? void 0 : _b.s, l = (_c = particle.color) === null || _c === void 0 ? void 0 : _c.l;\n    if (h) {\n        updateColorValue(delta, h, animationOptions.h, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, animationOptions.s, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, animationOptions.l, 100, true);\n    }\n}\nexport class ColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        var _a, _b, _c;\n        const animationOptions = particle.options.color.animation;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && animationOptions.h.enable) ||\n                (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && animationOptions.s.enable) ||\n                (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && animationOptions.l.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle, delta);\n    }\n}\n", "import { ColorUpdater } from \"./ColorUpdater\";\nexport async function loadColorUpdater(engine) {\n    await engine.addParticleUpdater(\"color\", (container) => new ColorUpdater(container));\n}\n", "import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = getRandom() / 4.0, theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u)), v = getRandom();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2), [a, b] = [size.width / 2, size.height / 2], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n", "export class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n", "export class EmitterSize {\n    constructor() {\n        this.mode = \"percent\";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, setRangeValue } from \"tsparticles-engine\";\nimport { EmitterLife } from \"./EmitterLife\";\nimport { EmitterRate } from \"./EmitterRate\";\nimport { EmitterSize } from \"./EmitterSize\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = \"square\";\n        this.startCount = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (this.size === undefined) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        if (data.shape !== undefined) {\n            this.shape = data.shape;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n", "import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        var _h;\n        this.emitters = emitters;\n        this.container = container;\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (((_a = this.options.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = (_b = this._initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n        this.name = this.options.name;\n        this._shape = (_c = this._engine.emitterShapeManager) === null || _c === void 0 ? void 0 : _c.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : (particlesOptions = {});\n        (_d = particlesOptions.move) !== null && _d !== void 0 ? _d : (particlesOptions.move = {});\n        (_e = (_h = particlesOptions.move).direction) !== null && _e !== void 0 ? _e : (_h.direction = this.options.direction);\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            (_f = this.options.size) !== null && _f !== void 0 ? _f : (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })();\n        this._lifeCount = (_g = this.options.life.count) !== null && _g !== void 0 ? _g : -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return {\n            width: this.size.mode === \"percent\"\n                ? (container.canvas.size.width * this.size.width) / 100\n                : this.size.width,\n            height: this.size.mode === \"percent\"\n                ? (container.canvas.size.height * this.size.height) / 100\n                : this.size.height,\n        };\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        var _a;\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= ((_a = this._spawnDelay) !== null && _a !== void 0 ? _a : 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this.prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    update(delta) {\n        var _a, _b, _c;\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = (_a = this._spawnDelay) !== null && _a !== void 0 ? _a : 0;\n            this._currentEmitDelay = (_b = this._emitDelay) !== null && _b !== void 0 ? _b : 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this.emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this.calcPosition();\n                    this._spawnDelay = (((_c = this.options.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this.destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this.emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    calcPosition() {\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    destroy() {\n        this.emitters.removeEmitter(this);\n        this._engine.dispatchEvent(\"emitterDestroyed\", {\n            container: this.container,\n            data: {\n                emitter: this,\n            },\n        });\n    }\n    emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this.emitParticles(quantity);\n    }\n    emitParticles(quantity) {\n        var _a, _b, _c;\n        const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = (_a = this.options.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\n                if (hslAnimation) {\n                    this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                    this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                    this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                }\n                if (!particlesOptions.color) {\n                    particlesOptions.color = {\n                        value: this.spawnColor,\n                    };\n                }\n                else {\n                    particlesOptions.color.value = this.spawnColor;\n                }\n            }\n            if (!position) {\n                return;\n            }\n            const pPosition = (_c = (_b = this._shape) === null || _b === void 0 ? void 0 : _b.randomPosition(position, size, this.fill)) !== null && _c !== void 0 ? _c : position;\n            this.container.particles.addParticle(pPosition, particlesOptions);\n        }\n    }\n    prepareToDie() {\n        var _a;\n        if (this._paused) {\n            return;\n        }\n        const duration = (_a = this.options.life) === null || _a === void 0 ? void 0 : _a.duration;\n        if (this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal) &&\n            duration !== undefined &&\n            duration > 0) {\n            this._duration = duration * 1000;\n        }\n    }\n    setColorAnimation(animation, initValue, maxValue) {\n        var _a;\n        const container = this.container;\n        if (!animation.enable) {\n            return initValue;\n        }\n        const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue((_a = animation.speed) !== null && _a !== void 0 ? _a : 0);\n        return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n    }\n}\n", "import { arrayRandomIndex, executeOnSingleOrMultiple, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode === \"emitter\") {\n            let emittersModeOptions;\n            if (modeEmitters && modeEmitters.value instanceof Array) {\n                if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                    emittersModeOptions = [];\n                    const usedIndexes = [];\n                    for (let i = 0; i < modeEmitters.random.count; i++) {\n                        const idx = arrayRandomIndex(modeEmitters.value);\n                        if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                            i--;\n                            continue;\n                        }\n                        usedIndexes.push(idx);\n                        emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                    }\n                }\n                else {\n                    emittersModeOptions = modeEmitters.value;\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n            }\n            const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n            executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n                this.addEmitter(emitter, ePosition);\n            });\n        }\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n", "const shapes = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShape(name, drawer) {\n        if (!this.getShape(name)) {\n            shapes.set(name, drawer);\n        }\n    }\n    getShape(name) {\n        return shapes.get(name);\n    }\n    getSupportedShapes() {\n        return shapes.keys();\n    }\n}\n", "import { getRandom } from \"tsparticles-engine\";\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - 0.5);\n}\nexport class SquareShape {\n    randomPosition(position, size, fill) {\n        if (fill) {\n            return {\n                x: randomSquareCoordinate(position.x, size.width),\n                y: randomSquareCoordinate(position.y, size.height),\n            };\n        }\n        else {\n            const halfW = size.width / 2, halfH = size.height / 2, side = Math.floor(getRandom() * 4), v = (getRandom() - 0.5) * 2;\n            switch (side) {\n                case 0:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y - halfH,\n                    };\n                case 1:\n                    return {\n                        x: position.x - halfW,\n                        y: position.y + v * halfH,\n                    };\n                case 2:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y + halfH,\n                    };\n                case 3:\n                default:\n                    return {\n                        x: position.x + halfW,\n                        y: position.y + v * halfH,\n                    };\n            }\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source === null || source === void 0 ? void 0 : source.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (emitterMode.value instanceof Array) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: (_c = emitterMode.random.count) !== null && _c !== void 0 ? _c : 1,\n                                enable: (_d = emitterMode.random.enable) !== null && _d !== void 0 ? _d : false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: (_e = emitterMode.random.count) !== null && _e !== void 0 ? _e : 1,\n                                enable: (_f = emitterMode.random.enable) !== null && _f !== void 0 ? _f : false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        var _a, _b, _c;\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((emitters instanceof Array && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            var _a;\n            (_a = engine.emitterShapeManager) === null || _a === void 0 ? void 0 : _a.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.random.minimumValue = 0.0001;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { LifeDelay } from \"./LifeDelay\";\nimport { LifeDuration } from \"./LifeDuration\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n", "import { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source === null || source === void 0 ? void 0 : source.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n", "import { LifeUpdater } from \"./LifeUpdater\";\nexport async function loadLifeUpdater(engine) {\n    await engine.addParticleUpdater(\"life\", (container) => new LifeUpdater(container));\n}\n", "export class MotionReduce {\n    constructor() {\n        this.factor = 4;\n        this.value = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { MotionReduce } from \"./MotionReduce\";\nexport class Motion {\n    constructor() {\n        this.disable = false;\n        this.reduce = new MotionReduce();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.disable !== undefined) {\n            this.disable = data.disable;\n        }\n        this.reduce.load(data.reduce);\n    }\n}\n", "import { safeMatchMedia } from \"tsparticles-engine\";\nexport class MotionInstance {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions.motion;\n        if (options && (options.disable || options.reduce.value)) {\n            const mediaQuery = safeMatchMedia(\"(prefers-reduced-motion: reduce)\");\n            if (mediaQuery) {\n                this._handleMotionChange(mediaQuery);\n                const handleChange = async () => {\n                    this._handleMotionChange(mediaQuery);\n                    try {\n                        await container.refresh();\n                    }\n                    catch (_a) {\n                    }\n                };\n                if (mediaQuery.addEventListener !== undefined) {\n                    mediaQuery.addEventListener(\"change\", handleChange);\n                }\n                else if (mediaQuery.addListener !== undefined) {\n                    mediaQuery.addListener(handleChange);\n                }\n            }\n            else {\n                container.retina.reduceFactor = 1;\n            }\n        }\n        else {\n            container.retina.reduceFactor = 1;\n        }\n    }\n    _handleMotionChange(mediaQuery) {\n        const container = this._container, motion = container.actualOptions.motion;\n        if (!motion) {\n            return;\n        }\n        container.retina.reduceFactor = mediaQuery.matches\n            ? motion.disable\n                ? 0\n                : motion.reduce.value\n                    ? 1 / motion.reduce.factor\n                    : 1\n            : 1;\n    }\n}\n", "import { Motion } from \"./Options/Classes/Motion\";\nimport { MotionInstance } from \"./MotionInstance\";\nclass MotionPlugin {\n    constructor(engine) {\n        this.id = \"motion\";\n        this._engine = engine;\n    }\n    getPlugin(container) {\n        return new MotionInstance(container, this._engine);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin()) {\n            return;\n        }\n        let motionOptions = options.motion;\n        if ((motionOptions === null || motionOptions === void 0 ? void 0 : motionOptions.load) === undefined) {\n            options.motion = motionOptions = new Motion();\n        }\n        motionOptions.load(source === null || source === void 0 ? void 0 : source.motion);\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nexport async function loadMotionPlugin(engine) {\n    const plugin = new MotionPlugin(engine);\n    await engine.addPlugin(plugin);\n}\n", "import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, randomInRange, } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.opacity.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nfunction updateOpacity(particle, delta) {\n    var _a, _b, _c, _d, _e, _f;\n    if (!particle.opacity) {\n        return;\n    }\n    const minValue = particle.opacity.min, maxValue = particle.opacity.max, decay = (_a = particle.opacity.decay) !== null && _a !== void 0 ? _a : 1;\n    if (particle.destroyed ||\n        !particle.opacity.enable ||\n        (((_b = particle.opacity.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.opacity.loops) !== null && _c !== void 0 ? _c : 0) > ((_d = particle.opacity.maxLoops) !== null && _d !== void 0 ? _d : 0))) {\n        return;\n    }\n    switch (particle.opacity.status) {\n        case \"increasing\":\n            if (particle.opacity.value >= maxValue) {\n                particle.opacity.status = \"decreasing\";\n                if (!particle.opacity.loops) {\n                    particle.opacity.loops = 0;\n                }\n                particle.opacity.loops++;\n            }\n            else {\n                particle.opacity.value += ((_e = particle.opacity.velocity) !== null && _e !== void 0 ? _e : 0) * delta.factor;\n            }\n            break;\n        case \"decreasing\":\n            if (particle.opacity.value <= minValue) {\n                particle.opacity.status = \"increasing\";\n                if (!particle.opacity.loops) {\n                    particle.opacity.loops = 0;\n                }\n                particle.opacity.loops++;\n            }\n            else {\n                particle.opacity.value -= ((_f = particle.opacity.velocity) !== null && _f !== void 0 ? _f : 0) * delta.factor;\n            }\n            break;\n    }\n    if (particle.opacity.velocity && particle.opacity.decay !== 1) {\n        particle.opacity.velocity *= decay;\n    }\n    checkDestroy(particle, particle.opacity.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        particle.opacity.value = clamp(particle.opacity.value, minValue, maxValue);\n    }\n}\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity;\n        particle.opacity = {\n            enable: opacityOptions.animation.enable,\n            max: getRangeMax(opacityOptions.value),\n            min: getRangeMin(opacityOptions.value),\n            value: getRangeValue(opacityOptions.value),\n            loops: 0,\n            maxLoops: getRangeValue(opacityOptions.animation.count),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.decay = 1 - getRangeValue(opacityAnimation.decay);\n            particle.opacity.status = \"increasing\";\n            const opacityRange = opacityOptions.value;\n            particle.opacity.min = getRangeMin(opacityRange);\n            particle.opacity.max = getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case \"min\":\n                    particle.opacity.value = particle.opacity.min;\n                    particle.opacity.status = \"increasing\";\n                    break;\n                case \"random\":\n                    particle.opacity.value = randomInRange(particle.opacity);\n                    particle.opacity.status =\n                        getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                    break;\n                case \"max\":\n                default:\n                    particle.opacity.value = particle.opacity.max;\n                    particle.opacity.status = \"decreasing\";\n                    break;\n            }\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / 100) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n        particle.opacity.initialValue = particle.opacity.value;\n    }\n    isEnabled(particle) {\n        var _a, _b, _c, _d;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 ||\n                (((_b = particle.opacity.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 &&\n                    ((_c = particle.opacity.loops) !== null && _c !== void 0 ? _c : 0) < ((_d = particle.opacity.maxLoops) !== null && _d !== void 0 ? _d : 0))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateOpacity(particle, delta);\n    }\n}\n", "import { OpacityUpdater } from \"./OpacityUpdater\";\nexport async function loadOpacityUpdater(engine) {\n    await engine.addParticleUpdater(\"opacity\", (container) => new OpacityUpdater(container));\n}\n", "export class ConfettiOptions {\n    constructor() {\n        this.angle = 90;\n        this.count = 50;\n        this.spread = 45;\n        this.startVelocity = 45;\n        this.decay = 0.9;\n        this.gravity = 1;\n        this.drift = 0;\n        this.ticks = 200;\n        this.position = {\n            x: 50,\n            y: 50,\n        };\n        this.colors = [\"#ffffff\", \"#ff0000\"];\n        this.shapes = [\"square\", \"circle\"];\n        this.scalar = 1;\n        this.zIndex = 100;\n        this.disableForReducedMotion = true;\n    }\n    get origin() {\n        return {\n            x: this.position.x / 100,\n            y: this.position.y / 100,\n        };\n    }\n    set origin(value) {\n        this.position.x = value.x * 100;\n        this.position.y = value.y * 100;\n    }\n    get particleCount() {\n        return this.count;\n    }\n    set particleCount(value) {\n        this.count = value;\n    }\n    load(data) {\n        var _a, _b;\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = data.angle;\n        }\n        const count = (_a = data.count) !== null && _a !== void 0 ? _a : data.particleCount;\n        if (count !== undefined) {\n            this.count = count;\n        }\n        if (data.spread !== undefined) {\n            this.spread = data.spread;\n        }\n        if (data.startVelocity !== undefined) {\n            this.startVelocity = data.startVelocity;\n        }\n        if (data.decay !== undefined) {\n            this.decay = data.decay;\n        }\n        if (data.gravity !== undefined) {\n            this.gravity = data.gravity;\n        }\n        if (data.drift !== undefined) {\n            this.drift = data.drift;\n        }\n        if (data.ticks !== undefined) {\n            this.ticks = data.ticks;\n        }\n        const position = (_b = data.position) !== null && _b !== void 0 ? _b : this.position;\n        if ((position === null || position === void 0 ? void 0 : position.x) !== undefined) {\n            this.position.x = position.x;\n        }\n        if ((position === null || position === void 0 ? void 0 : position.y) !== undefined) {\n            this.position.y = position.y;\n        }\n        if (data.colors !== undefined) {\n            if (data.colors instanceof Array) {\n                this.colors = [...data.colors];\n            }\n            else {\n                this.colors = data.colors;\n            }\n        }\n        if (data.shapes !== undefined) {\n            if (data.shapes instanceof Array) {\n                this.shapes = [...data.shapes];\n            }\n            else {\n                this.shapes = data.shapes;\n            }\n        }\n        if (data.scalar !== undefined) {\n            this.scalar = data.scalar;\n        }\n        if (data.zIndex !== undefined) {\n            this.zIndex = data.zIndex;\n        }\n        if (data.disableForReducedMotion !== undefined) {\n            this.disableForReducedMotion = data.disableForReducedMotion;\n        }\n    }\n}\n", "import { ConfettiOptions } from \"./ConfettiOptions\";\nexport const loadOptions = (confettiOptions) => {\n    const actualOptions = new ConfettiOptions();\n    actualOptions.load(confettiOptions);\n    return {\n        fullScreen: {\n            enable: true,\n            zIndex: actualOptions.zIndex,\n        },\n        fpsLimit: 120,\n        particles: {\n            number: {\n                value: 0,\n            },\n            color: {\n                value: actualOptions.colors,\n            },\n            shape: {\n                type: actualOptions.shapes,\n            },\n            opacity: {\n                value: { min: 0, max: 1 },\n                animation: {\n                    enable: true,\n                    speed: 0.5,\n                    startValue: \"max\",\n                    destroy: \"min\",\n                },\n            },\n            size: {\n                value: 5 * actualOptions.scalar,\n            },\n            links: {\n                enable: false,\n            },\n            life: {\n                duration: {\n                    sync: true,\n                    value: actualOptions.ticks / 60,\n                },\n                count: 1,\n            },\n            move: {\n                angle: {\n                    value: actualOptions.spread,\n                    offset: 0,\n                },\n                drift: {\n                    min: -actualOptions.drift,\n                    max: actualOptions.drift,\n                },\n                enable: true,\n                gravity: {\n                    enable: true,\n                    acceleration: actualOptions.gravity * 9.81,\n                },\n                speed: actualOptions.startVelocity,\n                decay: 1 - actualOptions.decay,\n                direction: -actualOptions.angle,\n                random: true,\n                straight: false,\n                outModes: {\n                    default: \"none\",\n                    bottom: \"destroy\",\n                },\n            },\n            rotate: {\n                value: {\n                    min: 0,\n                    max: 360,\n                },\n                direction: \"random\",\n                animation: {\n                    enable: true,\n                    speed: 60,\n                },\n            },\n            tilt: {\n                direction: \"random\",\n                enable: true,\n                value: {\n                    min: 0,\n                    max: 360,\n                },\n                animation: {\n                    enable: true,\n                    speed: 60,\n                },\n            },\n            roll: {\n                darken: {\n                    enable: true,\n                    value: 25,\n                },\n                enable: true,\n                speed: {\n                    min: 15,\n                    max: 25,\n                },\n            },\n            wobble: {\n                distance: 30,\n                enable: true,\n                speed: {\n                    min: -15,\n                    max: 15,\n                },\n            },\n        },\n        detectRetina: true,\n        motion: {\n            disable: actualOptions.disableForReducedMotion,\n        },\n        emitters: {\n            startCount: actualOptions.count,\n            position: actualOptions.position,\n            size: {\n                width: 0,\n                height: 0,\n            },\n            rate: {\n                delay: 0,\n                quantity: 0,\n            },\n            life: {\n                duration: 0.1,\n                count: 1,\n            },\n        },\n    };\n};\n", "import { getValue } from \"tsparticles-engine\";\nexport function bounceHorizontal(data) {\n    if (data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-horizontal\" &&\n        data.outMode !== \"bounceHorizontal\" &&\n        data.outMode !== \"split\") {\n        return;\n    }\n    if (data.bounds.right < 0) {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.horizontal);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if (data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-vertical\" &&\n        data.outMode !== \"bounceVertical\" &&\n        data.outMode !== \"split\") {\n        return;\n    }\n    if (data.bounds.bottom < 0) {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0) ||\n        (data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.vertical);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\n", "import { calculateBounds } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            \"bounce\",\n            \"bounce-vertical\",\n            \"bounce-horizontal\",\n            \"bounceVertical\",\n            \"bounceHorizontal\",\n            \"split\",\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n", "import { Vector, getDistances, isPointInside } from \"tsparticles-engine\";\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"destroy\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"normal\":\n            case \"outside\":\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case \"inside\": {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                const { x: vx, y: vy } = particle.velocity;\n                if ((vx < 0 && dx > particle.moveCenter.radius) ||\n                    (vy < 0 && dy > particle.moveCenter.radius) ||\n                    (vx >= 0 && dx < -particle.moveCenter.radius) ||\n                    (vy >= 0 && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n}\n", "import { Vector, isPointInside } from \"tsparticles-engine\";\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ||\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n", "import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"out\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"inside\": {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case \"outside\": {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case \"normal\": {\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === \"right\" &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === \"bottom\" &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n", "import { BounceOutMode } from \"./BounceOutMode\";\nimport { DestroyOutMode } from \"./DestroyOutMode\";\nimport { NoneOutMode } from \"./NoneOutMode\";\nimport { OutOutMode } from \"./OutOutMode\";\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n        this.updaters = [\n            new BounceOutMode(container),\n            new DestroyOutMode(container),\n            new OutOutMode(container),\n            new NoneOutMode(container),\n        ];\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        var _a, _b, _c, _d;\n        const outModes = particle.options.move.outModes;\n        this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, \"bottom\");\n        this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, \"left\");\n        this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, \"right\");\n        this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, \"top\");\n    }\n    updateOutMode(particle, delta, outMode, direction) {\n        for (const updater of this.updaters) {\n            updater.update(particle, direction, delta, outMode);\n        }\n    }\n}\n", "import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater\";\nexport async function loadOutModesUpdater(engine) {\n    await engine.addParticleUpdater(\"outModes\", (container) => new OutOfCanvasUpdater(container));\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { OptionsColor, setRangeValue } from \"tsparticles-engine\";\nimport { RollLight } from \"./RollLight\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = \"vertical\";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n", "import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor, max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    getTransformValues(particle) {\n        var _a;\n        const roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n            particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: getRandom() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = rangeColorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0,\n            };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n", "import { RollUpdater } from \"./RollUpdater\";\nexport async function loadRollUpdater(engine) {\n    await engine.addParticleUpdater(\"roll\", () => new RollUpdater());\n}\n", "import { clamp, getRandom } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.size.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nfunction updateSize(particle, delta) {\n    var _a, _b, _c, _d, _e;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, minValue = particle.size.min, maxValue = particle.size.max, decay = (_b = particle.size.decay) !== null && _b !== void 0 ? _b : 1;\n    if (particle.destroyed ||\n        !particle.size.enable ||\n        (((_c = particle.size.maxLoops) !== null && _c !== void 0 ? _c : 0) > 0 && ((_d = particle.size.loops) !== null && _d !== void 0 ? _d : 0) > ((_e = particle.size.maxLoops) !== null && _e !== void 0 ? _e : 0))) {\n        return;\n    }\n    switch (particle.size.status) {\n        case \"increasing\":\n            if (particle.size.value >= maxValue) {\n                particle.size.status = \"decreasing\";\n                if (!particle.size.loops) {\n                    particle.size.loops = 0;\n                }\n                particle.size.loops++;\n            }\n            else {\n                particle.size.value += sizeVelocity;\n            }\n            break;\n        case \"decreasing\":\n            if (particle.size.value <= minValue) {\n                particle.size.status = \"increasing\";\n                if (!particle.size.loops) {\n                    particle.size.loops = 0;\n                }\n                particle.size.loops++;\n            }\n            else {\n                particle.size.value -= sizeVelocity;\n            }\n    }\n    if (particle.size.velocity && decay !== 1) {\n        particle.size.velocity *= decay;\n    }\n    checkDestroy(particle, particle.size.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        particle.size.value = clamp(particle.size.value, minValue, maxValue);\n    }\n}\nexport class SizeUpdater {\n    init(particle) {\n        var _a;\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                (((_a = particle.retina.sizeAnimationSpeed) !== null && _a !== void 0 ? _a : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        var _a, _b, _c, _d;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            (((_a = particle.size.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 ||\n                (((_b = particle.size.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.size.loops) !== null && _c !== void 0 ? _c : 0) < ((_d = particle.size.maxLoops) !== null && _d !== void 0 ? _d : 0))));\n    }\n    reset(particle) {\n        particle.size.loops = 0;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateSize(particle, delta);\n    }\n}\n", "import { SizeUpdater } from \"./SizeUpdater\";\nexport async function loadSizeUpdater(engine) {\n    await engine.addParticleUpdater(\"size\", () => new SizeUpdater());\n}\n", "const fixFactor = Math.sqrt(2);\nexport class SquareDrawer {\n    draw(context, particle, radius) {\n        context.rect(-radius / fixFactor, -radius / fixFactor, (radius * 2) / fixFactor, (radius * 2) / fixFactor);\n    }\n    getSidesCount() {\n        return 4;\n    }\n}\n", "import { SquareDrawer } from \"./SquareDrawer\";\nexport async function loadSquareShape(engine) {\n    const drawer = new SquareDrawer();\n    await engine.addShape([\"edge\", \"square\"], drawer);\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { TiltAnimation } from \"./TiltAnimation\";\nimport { ValueWithRandom } from \"tsparticles-engine\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = \"clockwise\";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nfunction updateTilt(particle, delta) {\n    var _a, _b;\n    if (!particle.tilt || !particle.options.tilt) {\n        return;\n    }\n    const tilt = particle.options.tilt, tiltAnimation = tilt.animation, speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = particle.tilt.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!tiltAnimation.enable) {\n        return;\n    }\n    switch (particle.tilt.status) {\n        case \"increasing\":\n            particle.tilt.value += speed;\n            if (particle.tilt.value > max) {\n                particle.tilt.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            particle.tilt.value -= speed;\n            if (particle.tilt.value < 0) {\n                particle.tilt.value += max;\n            }\n            break;\n    }\n    if (particle.tilt.velocity && decay !== 1) {\n        particle.tilt.velocity *= decay;\n    }\n}\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        var _a;\n        const tilt = ((_a = particle.tilt) === null || _a === void 0 ? void 0 : _a.enable) && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        var _a;\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n        if (tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n        return !particle.destroyed && !particle.spawning && !!(tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n", "import { TiltUpdater } from \"./TiltUpdater\";\nexport async function loadTiltUpdater(engine) {\n    await engine.addParticleUpdater(\"tilt\", (container) => new TiltUpdater(container));\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n", "import { WobbleSpeed } from \"./WobbleSpeed\";\nimport { setRangeValue } from \"tsparticles-engine\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (typeof data.speed === \"number\") {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n", "import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nfunction updateWobble(particle, delta) {\n    var _a;\n    const wobble = particle.options.wobble;\n    if (!(wobble === null || wobble === void 0 ? void 0 : wobble.enable) || !particle.wobble) {\n        return;\n    }\n    const angleSpeed = particle.wobble.angleSpeed * delta.factor, moveSpeed = particle.wobble.moveSpeed * delta.factor, distance = (moveSpeed * (((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI;\n    particle.wobble.angle += angleSpeed;\n    if (particle.wobble.angle > max) {\n        particle.wobble.angle -= max;\n    }\n    particle.position.x += distance * Math.cos(particle.wobble.angle);\n    particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n}\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        var _a;\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.enable) {\n            particle.wobble = {\n                angle: getRandom() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue((_a = wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.distance) !== null && _a !== void 0 ? _a : 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        var _a;\n        return !particle.destroyed && !particle.spawning && !!((_a = particle.options.wobble) === null || _a === void 0 ? void 0 : _a.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source === null || source === void 0 ? void 0 : source.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n", "import { WobbleUpdater } from \"./WobbleUpdater\";\nexport async function loadWobbleUpdater(engine) {\n    await engine.addParticleUpdater(\"wobble\", (container) => new WobbleUpdater(container));\n}\n", "import { getRandom, tsParticles } from \"tsparticles-engine\";\nimport { loadAngleUpdater } from \"tsparticles-updater-angle\";\nimport { loadBaseMover } from \"tsparticles-move-base\";\nimport { loadCircleShape } from \"tsparticles-shape-circle\";\nimport { loadColorUpdater } from \"tsparticles-updater-color\";\nimport { loadEmittersPlugin } from \"tsparticles-plugin-emitters\";\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\nimport { loadMotionPlugin } from \"tsparticles-plugin-motion\";\nimport { loadOpacityUpdater } from \"tsparticles-updater-opacity\";\nimport { loadOptions } from \"./options\";\nimport { loadOutModesUpdater } from \"tsparticles-updater-out-modes\";\nimport { loadRollUpdater } from \"tsparticles-updater-roll\";\nimport { loadSizeUpdater } from \"tsparticles-updater-size\";\nimport { loadSquareShape } from \"tsparticles-shape-square\";\nimport { loadTiltUpdater } from \"tsparticles-updater-tilt\";\nimport { loadWobbleUpdater } from \"tsparticles-updater-wobble\";\nasync function loadPreset(engine, confettiOptions, override = false) {\n    await loadBaseMover(engine);\n    await loadCircleShape(engine);\n    await loadSquareShape(engine);\n    await loadColorUpdater(engine);\n    await loadSizeUpdater(engine);\n    await loadOpacityUpdater(engine);\n    await loadOutModesUpdater(engine);\n    await loadEmittersPlugin(engine);\n    await loadMotionPlugin(engine);\n    await loadWobbleUpdater(engine);\n    await loadRollUpdater(engine);\n    await loadAngleUpdater(engine);\n    await loadTiltUpdater(engine);\n    await loadLifeUpdater(engine);\n    await engine.addPreset(\"confetti\", loadOptions(confettiOptions), override);\n}\nexport async function loadConfettiPreset(main) {\n    await loadPreset(main, {}, true);\n}\nexport async function confetti(idOrOptions, confettiOptions) {\n    let options;\n    let id;\n    if (typeof idOrOptions === \"string\") {\n        id = idOrOptions;\n        options = confettiOptions !== null && confettiOptions !== void 0 ? confettiOptions : {};\n    }\n    else {\n        id = `tsparticles_${Math.floor(getRandom() * 1000)}`;\n        options = idOrOptions;\n    }\n    await loadPreset(tsParticles, options, true);\n    await tsParticles.load(id, { preset: \"confetti\" });\n}\n"],
  "mappings": "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",
  "names": ["checkDestroy"]
}
