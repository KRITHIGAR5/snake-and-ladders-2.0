(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine", "tsparticles-updater-angle", "tsparticles-move-base", "tsparticles-shape-circle", "tsparticles-updater-color", "tsparticles-plugin-emitters", "tsparticles-updater-life", "tsparticles-plugin-motion", "tsparticles-updater-opacity", "./options", "tsparticles-updater-out-modes", "tsparticles-updater-roll", "tsparticles-updater-size", "tsparticles-shape-square", "tsparticles-updater-tilt", "tsparticles-updater-wobble"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.confetti = exports.loadConfettiPreset = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    const tsparticles_updater_angle_1 = require("tsparticles-updater-angle");
    const tsparticles_move_base_1 = require("tsparticles-move-base");
    const tsparticles_shape_circle_1 = require("tsparticles-shape-circle");
    const tsparticles_updater_color_1 = require("tsparticles-updater-color");
    const tsparticles_plugin_emitters_1 = require("tsparticles-plugin-emitters");
    const tsparticles_updater_life_1 = require("tsparticles-updater-life");
    const tsparticles_plugin_motion_1 = require("tsparticles-plugin-motion");
    const tsparticles_updater_opacity_1 = require("tsparticles-updater-opacity");
    const options_1 = require("./options");
    const tsparticles_updater_out_modes_1 = require("tsparticles-updater-out-modes");
    const tsparticles_updater_roll_1 = require("tsparticles-updater-roll");
    const tsparticles_updater_size_1 = require("tsparticles-updater-size");
    const tsparticles_shape_square_1 = require("tsparticles-shape-square");
    const tsparticles_updater_tilt_1 = require("tsparticles-updater-tilt");
    const tsparticles_updater_wobble_1 = require("tsparticles-updater-wobble");
    async function loadPreset(engine, confettiOptions, override = false) {
        await (0, tsparticles_move_base_1.loadBaseMover)(engine);
        await (0, tsparticles_shape_circle_1.loadCircleShape)(engine);
        await (0, tsparticles_shape_square_1.loadSquareShape)(engine);
        await (0, tsparticles_updater_color_1.loadColorUpdater)(engine);
        await (0, tsparticles_updater_size_1.loadSizeUpdater)(engine);
        await (0, tsparticles_updater_opacity_1.loadOpacityUpdater)(engine);
        await (0, tsparticles_updater_out_modes_1.loadOutModesUpdater)(engine);
        await (0, tsparticles_plugin_emitters_1.loadEmittersPlugin)(engine);
        await (0, tsparticles_plugin_motion_1.loadMotionPlugin)(engine);
        await (0, tsparticles_updater_wobble_1.loadWobbleUpdater)(engine);
        await (0, tsparticles_updater_roll_1.loadRollUpdater)(engine);
        await (0, tsparticles_updater_angle_1.loadAngleUpdater)(engine);
        await (0, tsparticles_updater_tilt_1.loadTiltUpdater)(engine);
        await (0, tsparticles_updater_life_1.loadLifeUpdater)(engine);
        await engine.addPreset("confetti", (0, options_1.loadOptions)(confettiOptions), override);
    }
    async function loadConfettiPreset(main) {
        await loadPreset(main, {}, true);
    }
    exports.loadConfettiPreset = loadConfettiPreset;
    async function confetti(idOrOptions, confettiOptions) {
        let options;
        let id;
        if (typeof idOrOptions === "string") {
            id = idOrOptions;
            options = confettiOptions !== null && confettiOptions !== void 0 ? confettiOptions : {};
        }
        else {
            id = `tsparticles_${Math.floor((0, tsparticles_engine_1.getRandom)() * 1000)}`;
            options = idOrOptions;
        }
        await loadPreset(tsparticles_engine_1.tsParticles, options, true);
        await tsparticles_engine_1.tsParticles.load(id, { preset: "confetti" });
    }
    exports.confetti = confetti;
});
