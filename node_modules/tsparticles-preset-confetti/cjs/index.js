"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.confetti = exports.loadConfettiPreset = void 0;
const tsparticles_engine_1 = require("tsparticles-engine");
const tsparticles_updater_angle_1 = require("tsparticles-updater-angle");
const tsparticles_move_base_1 = require("tsparticles-move-base");
const tsparticles_shape_circle_1 = require("tsparticles-shape-circle");
const tsparticles_updater_color_1 = require("tsparticles-updater-color");
const tsparticles_plugin_emitters_1 = require("tsparticles-plugin-emitters");
const tsparticles_updater_life_1 = require("tsparticles-updater-life");
const tsparticles_plugin_motion_1 = require("tsparticles-plugin-motion");
const tsparticles_updater_opacity_1 = require("tsparticles-updater-opacity");
const options_1 = require("./options");
const tsparticles_updater_out_modes_1 = require("tsparticles-updater-out-modes");
const tsparticles_updater_roll_1 = require("tsparticles-updater-roll");
const tsparticles_updater_size_1 = require("tsparticles-updater-size");
const tsparticles_shape_square_1 = require("tsparticles-shape-square");
const tsparticles_updater_tilt_1 = require("tsparticles-updater-tilt");
const tsparticles_updater_wobble_1 = require("tsparticles-updater-wobble");
function loadPreset(engine, confettiOptions, override = false) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, tsparticles_move_base_1.loadBaseMover)(engine);
        yield (0, tsparticles_shape_circle_1.loadCircleShape)(engine);
        yield (0, tsparticles_shape_square_1.loadSquareShape)(engine);
        yield (0, tsparticles_updater_color_1.loadColorUpdater)(engine);
        yield (0, tsparticles_updater_size_1.loadSizeUpdater)(engine);
        yield (0, tsparticles_updater_opacity_1.loadOpacityUpdater)(engine);
        yield (0, tsparticles_updater_out_modes_1.loadOutModesUpdater)(engine);
        yield (0, tsparticles_plugin_emitters_1.loadEmittersPlugin)(engine);
        yield (0, tsparticles_plugin_motion_1.loadMotionPlugin)(engine);
        yield (0, tsparticles_updater_wobble_1.loadWobbleUpdater)(engine);
        yield (0, tsparticles_updater_roll_1.loadRollUpdater)(engine);
        yield (0, tsparticles_updater_angle_1.loadAngleUpdater)(engine);
        yield (0, tsparticles_updater_tilt_1.loadTiltUpdater)(engine);
        yield (0, tsparticles_updater_life_1.loadLifeUpdater)(engine);
        yield engine.addPreset("confetti", (0, options_1.loadOptions)(confettiOptions), override);
    });
}
function loadConfettiPreset(main) {
    return __awaiter(this, void 0, void 0, function* () {
        yield loadPreset(main, {}, true);
    });
}
exports.loadConfettiPreset = loadConfettiPreset;
function confetti(idOrOptions, confettiOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        let options;
        let id;
        if (typeof idOrOptions === "string") {
            id = idOrOptions;
            options = confettiOptions !== null && confettiOptions !== void 0 ? confettiOptions : {};
        }
        else {
            id = `tsparticles_${Math.floor((0, tsparticles_engine_1.getRandom)() * 1000)}`;
            options = idOrOptions;
        }
        yield loadPreset(tsparticles_engine_1.tsParticles, options, true);
        yield tsparticles_engine_1.tsParticles.load(id, { preset: "confetti" });
    });
}
exports.confetti = confetti;
