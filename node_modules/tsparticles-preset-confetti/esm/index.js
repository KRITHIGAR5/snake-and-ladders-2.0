import { getRandom, tsParticles } from "tsparticles-engine";
import { loadAngleUpdater } from "tsparticles-updater-angle";
import { loadBaseMover } from "tsparticles-move-base";
import { loadCircleShape } from "tsparticles-shape-circle";
import { loadColorUpdater } from "tsparticles-updater-color";
import { loadEmittersPlugin } from "tsparticles-plugin-emitters";
import { loadLifeUpdater } from "tsparticles-updater-life";
import { loadMotionPlugin } from "tsparticles-plugin-motion";
import { loadOpacityUpdater } from "tsparticles-updater-opacity";
import { loadOptions } from "./options";
import { loadOutModesUpdater } from "tsparticles-updater-out-modes";
import { loadRollUpdater } from "tsparticles-updater-roll";
import { loadSizeUpdater } from "tsparticles-updater-size";
import { loadSquareShape } from "tsparticles-shape-square";
import { loadTiltUpdater } from "tsparticles-updater-tilt";
import { loadWobbleUpdater } from "tsparticles-updater-wobble";
async function loadPreset(engine, confettiOptions, override = false) {
    await loadBaseMover(engine);
    await loadCircleShape(engine);
    await loadSquareShape(engine);
    await loadColorUpdater(engine);
    await loadSizeUpdater(engine);
    await loadOpacityUpdater(engine);
    await loadOutModesUpdater(engine);
    await loadEmittersPlugin(engine);
    await loadMotionPlugin(engine);
    await loadWobbleUpdater(engine);
    await loadRollUpdater(engine);
    await loadAngleUpdater(engine);
    await loadTiltUpdater(engine);
    await loadLifeUpdater(engine);
    await engine.addPreset("confetti", loadOptions(confettiOptions), override);
}
export async function loadConfettiPreset(main) {
    await loadPreset(main, {}, true);
}
export async function confetti(idOrOptions, confettiOptions) {
    let options;
    let id;
    if (typeof idOrOptions === "string") {
        id = idOrOptions;
        options = confettiOptions !== null && confettiOptions !== void 0 ? confettiOptions : {};
    }
    else {
        id = `tsparticles_${Math.floor(getRandom() * 1000)}`;
        options = idOrOptions;
    }
    await loadPreset(tsParticles, options, true);
    await tsParticles.load(id, { preset: "confetti" });
}
